// Enhanced AI Assistant for WhatsApp CRM Integration
import { PrismaClient } from '@prisma/client';
import crmApiServices from './crmApi.js';
import twilioMessageServices from './twilioMessage.js';
import userServices from './user.js';

// AI Provider Configuration
const AI_PROVIDER = process.env.AI_PROVIDER || 'groq'; // 'groq' or 'openai'
const GROQ_API_KEY = process.env.GROQ_API_KEY;
const GROQ_BASE_URL = 'https://api.groq.com/openai/v1';
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_BASE_URL = 'https://api.openai.com/v1';

class AIAssistant {
    constructor() {
        this.supportedIntents = [
            'login', 'signup', 'dashboard', 'deposit', 'withdraw', 'transfer',
            'create_account', 'check_balance', 'history', 'kyc', 'refer_earn',
            'support', 'greeting', 'account_info', 'payment_methods',
            'check_verification', 'logout', 'menu', 'how_to_use'
        ];

        // Log AI provider configuration on startup
        console.log(`AI Assistant initialized with provider: ${AI_PROVIDER.toUpperCase()}`);
        console.log(`Model: ${this.getModelName()}`);
    }

    // Detect language from message content
    async detectLanguage(message) {
        const arabicPattern = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/;
        const hindiPattern = /[\u0900-\u097F]/;

        if (arabicPattern.test(message)) {
            return 'arabic';
        } else if (hindiPattern.test(message)) {
            return 'english'; // Hindi users follow English functionality
        } else {
            return 'english';
        }
    }

    // Quick access processor for natural language commands
    async processQuickAccess(message, session, from) {
        try {
            const detectedLanguage = await this.detectLanguage(message);
            const isAuthenticated = await this.checkAuthentication(from);

            console.log(`Quick access processing - Language: ${detectedLanguage}, Authenticated: ${isAuthenticated}`);

            // Analyze user intent using AI with fallback
            const analysis = await this.analyzeUserIntent(message, session, isAuthenticated);

            if (analysis.status === 'error') {
                // If AI analysis fails, try to provide helpful fallback
                console.warn('AI analysis failed, providing fallback response');

                // Check if it's a simple greeting
                if (/^(hi|hello|hey|hii|ŸÖÿ±ÿ≠ÿ®ÿß|ÿ£ŸáŸÑÿß|‡§π‡•à‡§≤‡•ã|‡§®‡§Æ‡§∏‡•ç‡§§‡•á)$/i.test(message.toLowerCase().trim())) {
                    return await this.handleQuickGreeting({}, session, from, detectedLanguage);
                }

                // Check if it's a help request
                if (/(help|support|ŸÖÿ≥ÿßÿπÿØÿ©|‡§∏‡§π‡§æ‡§Ø‡§§‡§æ|how to use|ŸÉŸäŸÅŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ)/i.test(message.toLowerCase())) {
                    return await this.handleQuickSupport({}, session, from, detectedLanguage);
                }

                return await twilioMessageServices.goBackTempMessage(
                    from,
                    '‚öôÔ∏è We\'re currently experiencing an issue with our AI assistance. Please use the WhatsApp template feature for help at this time. Thank you for your understanding! üôè'
                );

                return { handled: false, error: analysis.message };
                return { handled: false, error: analysis.message };
            }

            console.log('AI Analysis:', analysis);

            // Process the intent based on analysis
            return await this.executeIntent(analysis, session, from, detectedLanguage);

        } catch (error) {
            console.error('Quick access processing error:', error);
            return { handled: false, error: 'Failed to process quick access command' };
        }
    }

    // Check if user is authenticated
    async checkAuthentication(whatsappPhone) {
        try {
            const user = await userServices.find({ whatsappPhone });
            return user && user.token;
        } catch (error) {
            return false;
        }
    }

    // Execute the detected intent
    async executeIntent(analysis, session, from, language) {
        try {
            const { intent, params, needsAuth, hasCompleteInfo, confidence } = analysis;

            // Check confidence threshold
            if (confidence < 0.7) {
                return { handled: false, error: 'Low confidence in intent detection' };
            }

            // Check authentication requirement
            if (needsAuth && !(await this.checkAuthentication(from))) {
                const message = language === 'arabic'
                    ? 'Ÿäÿ¨ÿ® ÿπŸÑŸäŸÉ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ£ŸàŸÑÿßŸã ŸÑŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ Ÿáÿ∞Ÿá ÿßŸÑŸÖŸäÿ≤ÿ©. Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ£Ÿà ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ÿ¨ÿØŸäÿØ.'
                    : 'üîê You need to login first to access this feature. Please login or create an account.';
                await twilioMessageServices.sendTextMessage(from, message);
                return { handled: true, success: false };
            }

            // Route to appropriate handler
            switch (intent) {
                case 'login':
                    return await this.handleQuickLogin(params, session, from, language);

                case 'signup':
                    return await this.handleQuickSignup(params, session, from, language);

                case 'deposit':
                    return await this.handleQuickDeposit(params, session, from, language);

                case 'withdraw':
                    return await this.handleQuickWithdraw(params, session, from, language);

                case 'transfer':
                    return await this.handleQuickTransfer(params, session, from, language);

                case 'dashboard':
                    return await this.handleQuickDashboard(params, session, from, language);

                case 'check_balance':
                    return await this.handleQuickBalance(params, session, from, language);

                case 'history':
                    return await this.handleQuickHistory(params, session, from, language);

                case 'kyc':
                    return await this.handleQuickKYC(params, session, from, language);

                case 'create_account':
                    return await this.handleQuickCreateAccount(params, session, from, language);

                case 'refer_earn':
                    return await this.handleQuickReferEarn(params, session, from, language);

                case 'support':
                    return await this.handleQuickSupport(params, session, from, language);

                case 'greeting':
                    return await this.handleQuickGreeting(params, session, from, language);

                case 'account_info':
                    return await this.handleQuickAccountInfo(params, session, from, language);

                case 'payment_methods':
                    return await this.handleQuickPaymentMethods(params, session, from, language);

                case 'check_verification':
                    return await this.handleQuickCheckVerification(params, session, from, language);

                case 'logout':
                    return await this.handleQuickLogout(params, session, from, language);

                case 'menu':
                    return await this.handleQuickMenu(params, session, from, language);

                case 'how_to_use':
                    return await this.handleQuickHowToUse(params, session, from, language);

                default:
                    return { handled: false, error: `Intent ${intent} not implemented` };
            }

        } catch (error) {
            console.error('Intent execution error:', error);
            return { handled: false, error: 'Failed to execute intent' };
        }
    }

    // Quick access handlers
    async handleQuickLogin(params, session, from, language) {
        try {
            if (params.email && params.password) {
                const loginResult = await crmApiServices.login(from, params.email, params.password);

                if (loginResult.error) {
                    await twilioMessageServices.goBackTempMessage(from, loginResult.error);
                    return { handled: true, success: false };
                }

                const message = language === 'arabic'
                    ? '‚úÖ ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠! ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.'
                    : '‚úÖ Login successful! Welcome back.';
                await twilioMessageServices.sendTextMessage(from, message);

                // Update session and show main menu
                session.step = 'main-menu';
                await this.saveSession(from, session);
                await twilioMessageServices.mainListTempMessage(from);

                return { handled: true, success: true };
            } else {
                const message = language === 'arabic'
                    ? 'Ÿäÿ±ÿ¨Ÿâ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸàŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ŸÑŸÑÿØÿÆŸàŸÑ ÿ®ÿ≥ÿ±ÿπÿ©. ŸÖÿ´ÿßŸÑ: "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ user@email.com password123"'
                    : 'Please provide both email and password for quick login. Example: "login user@email.com password123"';
                await twilioMessageServices.sendTextMessage(from, message);
                return { handled: true, success: false };
            }
        } catch (error) {
            console.error('Quick login error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickSignup(params, session, from, language) {
        try {
            if (params.name && params.email && params.password && params.phone) {
                // Complete information provided - process immediately
                return await this.processCompleteSignup(params, session, from, language);
            } else {
                // Incomplete information - start signup flow and pre-fill what we have
                session.data = session.data || {};

                if (params.name) session.data.firstName = params.name.split(' ')[0];
                if (params.name && params.name.includes(' ')) session.data.lastName = params.name.split(' ').slice(1).join(' ');
                if (params.email) session.data.email = params.email;
                if (params.password) session.data.password = params.password;
                if (params.phone) session.data.phone = params.phone;

                // Start the signup flow from where we need info
                if (!params.name) {
                    session.step = 'signup-firstname';
                    await this.saveSession(from, session);

                    const message = language === 'arabic'
                        ? 'ŸÖÿ±ÿ≠ÿ®ÿßŸã! ÿØÿπŸÜÿß ŸÜŸÜÿ¥ÿ¶ ÿ≠ÿ≥ÿßÿ®ŸÉ. ŸÖÿß ŸáŸà ÿßÿ≥ŸÖŸÉ ÿßŸÑÿ£ŸàŸÑÿü'
                        : "Hi! Let's create your account. What's your first name?";
                    await twilioMessageServices.sendTextMessage(from, message);
                } else if (!params.email) {
                    session.step = 'signup-email';
                    await this.saveSession(from, session);

                    const message = language === 'arabic'
                        ? `ÿ±ÿßÿ¶ÿπ ${params.name}! ŸÖÿß ŸáŸà ÿπŸÜŸàÿßŸÜ ÿ®ÿ±ŸäÿØŸÉ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿü`
                        : `Great ${params.name}! What's your email address?`;
                    await twilioMessageServices.sendTextMessage(from, message);
                } else if (!params.password) {
                    session.step = 'signup-password';
                    await this.saveSession(from, session);

                    const message = language === 'arabic'
                        ? 'Ÿäÿ±ÿ¨Ÿâ ÿ•ŸÜÿ¥ÿßÿ° ŸÉŸÑŸÖÿ© ŸÖÿ±Ÿàÿ± ŸÇŸàŸäÿ© ŸÑÿ≠ÿ≥ÿßÿ®ŸÉ:'
                        : 'Please create a strong password for your account:';
                    await twilioMessageServices.sendTextMessage(from, message);
                } else if (!params.phone) {
                    session.step = 'signup-phone';
                    await this.saveSession(from, session);

                    const message = language === 'arabic'
                        ? 'ÿ£ÿÆŸäÿ±ÿßŸãÿå ŸÖÿß ŸáŸà ÿ±ŸÇŸÖ Ÿáÿßÿ™ŸÅŸÉÿü'
                        : 'Finally, what\'s your phone number?';
                    await twilioMessageServices.sendTextMessage(from, message);
                }

                return { handled: true, success: false };
            }
        } catch (error) {
            console.error('Quick signup error:', error);
            await twilioMessageServices.goBackTempMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async processCompleteSignup(params, session, from, language) {
        try {
            const signupData = {
                name: params.name,
                email: params.email,
                password: params.password,
                phoneNumber: params.phone,
                referralCode: session.data?.referralCode || 'BBCORP'
            };

            const result = await crmApiServices.signup(from, signupData);

            const message = language === 'arabic'
                ? `‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠! ${result}`
                : `‚úÖ Account created successfully! ${result}`;
            await twilioMessageServices.sendTextMessage(from, message);

            session.step = 'main-menu';
            await this.saveSession(from, session);
            await twilioMessageServices.mainListTempMessage(from);

            return { handled: true, success: true };
        } catch (error) {
            console.error('Complete signup processing error:', error);
            await twilioMessageServices.goBackTempMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async handleQuickDeposit(params, session, from, language) {
        try {
            if (params.amount && params.paymentMethod) {
                // Complete information provided - process immediately
                return await this.processCompleteDeposit(params, session, from, language);
            } else if (params.amount && !params.paymentMethod) {
                // Amount provided but no payment method - show payment options template
                const wallets = await crmApiServices.getWallet(from);
                if (!wallets || wallets.length === 0) {
                    const message = language === 'arabic'
                        ? '‚ùå ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿ≠ÿßŸÅÿ∏ ŸÖÿ™ÿßÿ≠ÿ© ŸÑŸÑÿ•ŸäÿØÿßÿπ. Ÿäÿ±ÿ¨Ÿâ ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≠ŸÅÿ∏ÿ© ÿ£ŸàŸÑÿßŸã.'
                        : '‚ùå No wallets available for deposit. Please create a wallet first.';
                    await twilioMessageServices.goBackTempMessage(from, message);
                    return { handled: true, success: false };
                }

                // Store the amount in session and set up for payment method selection
                session.data = session.data || {};
                session.data.walletId = wallets[0]._id;
                session.data.quickAccessAmount = params.amount; // Store for later use
                session.step = 'dashboard-deposit-options';
                await this.saveSession(from, session);

                const message = language === 'arabic'
                    ? `üí∞ ÿ±ÿßÿ¶ÿπ! ÿ™ÿ±ŸäÿØ ÿ•ŸäÿØÿßÿπ $${params.amount}. Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ:`
                    : `üí∞ Great! You want to deposit $${params.amount}. Please select your payment method:`;

                // await twilioMessageServices.sendTextMessage(from, message);
                await twilioMessageServices.deshboardDepositTempMessage(from);
                return { handled: true, success: true };
            } else if (!params.amount && params.paymentMethod) {
                // Payment method provided but no amount - ask for amount
                const message = language === 'arabic'
                    ? `Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ•ŸäÿØÿßÿπŸá ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ${params.paymentMethod}. (ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ÿØŸÜŸâ: $10)`
                    : `Please specify the amount you want to deposit using ${params.paymentMethod}. (Minimum: $10)`;
                await twilioMessageServices.sendTextMessage(from, message);

                // Set up session for amount input
                session.data = session.data || {};
                session.data.selectedPaymentGatewayName = params.paymentMethod;
                session.step = 'quick-deposit-amount-input';
                await this.saveSession(from, session);
                return { handled: true, success: false };
            } else {
                // No amount or payment method - show full deposit template
                session.step = 'dashboard-deposit-options';
                await this.saveSession(from, session);

                const message = language === 'arabic'
                    ? 'Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ ŸÑŸÑÿ•ŸäÿØÿßÿπ:'
                    : 'Please select your payment method for deposit:';

                await twilioMessageServices.sendTextMessage(from, message);
                await twilioMessageServices.deshboardDepositTempMessage(from);
                return { handled: true, success: true };
            }
        } catch (error) {
            console.error('Quick deposit error:', error);
            await twilioMessageServices.goBackTempMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async processCompleteDeposit(params, session, from, language) {
        try {
            // Get wallet info
            const wallets = await crmApiServices.getWallet(from);
            if (!wallets || wallets.length === 0) {
                const message = language === 'arabic'
                    ? '‚ùå ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿ≠ÿßŸÅÿ∏ ŸÖÿ™ÿßÿ≠ÿ© ŸÑŸÑÿ•ŸäÿØÿßÿπ. Ÿäÿ±ÿ¨Ÿâ ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≠ŸÅÿ∏ÿ© ÿ£ŸàŸÑÿßŸã.'
                    : '‚ùå No wallets available for deposit. Please create a wallet first.';
                await twilioMessageServices.goBackTempMessage(from, message);
                return { handled: true, success: false };
            }

            // Get payment gateways
            // const paymentGateways = await crmApiServices.getPaymentGateway(from);
            const paymentGateways = await crmApiServices.getPaymentGateway(from);
            if (!paymentGateways || paymentGateways.length === 0) {
                await twilioMessageServices.goBackTempMessage(from, `‚ùå No payment gateways are available at the moment. Please try again later.`);
                return { handled: true, success: false };
            }
            const gateway = paymentGateways.find(g =>
                g.uniqueName.toLowerCase() === params.paymentMethod.toLowerCase() ||
                g.uniqueName.toLowerCase().includes(params.paymentMethod.toLowerCase())
            );

            if (!gateway) {
                const message = language === 'arabic'
                    ? `‚ùå ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ ${params.paymentMethod} ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠ÿ©.`
                    : `‚ùå Payment method ${params.paymentMethod} is not available.`;
                await twilioMessageServices.goBackTempMessage(from, message);
                return { handled: true, success: false };
            }

            // Process deposit
            const depositPayload = {
                wallet: wallets[0]._id,
                transactionType: "deposit",
                amount: params.amount,
                paymentGateway: gateway._id
            };

            const response = await crmApiServices.createTransaction(from, depositPayload);

            if (gateway.uniqueName === 'match2pay' && response.url) {
                await twilioMessageServices.goBackTempMessage(from,
                    `üéâ Your deposit request of *$${params.amount}* has been created successfully.\n\n` +
                    `üì± *Ready to complete your payment?* Just using this link:\n${response.url}\n\n` +
                    `‚è±Ô∏è This link will be active for 10 minutes - quick and easy!`
                );
            } else if (gateway.uniqueName === 'whishMoney' && response.url) {
                await twilioMessageServices.goBackTempMessage(from,
                    `üéâ Your deposit request of *$${params.amount}* has been created successfully.\n\n` +
                    `üì± *Ready to complete your payment?* Just using this link:\n${response.url}\n\n` +
                    `‚è±Ô∏è This link will be active for 10 minutes - quick and easy!`
                );
            } else {
                const message = language === 'arabic'
                    ? `‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ∑ŸÑÿ® ÿßŸÑÿ•ŸäÿØÿßÿπ ÿ®ŸÜÿ¨ÿßÿ≠ ÿ®ŸÖÿ®ŸÑÿ∫ $${params.amount}.`
                    : `‚úÖ Deposit request created successfully for $${params.amount}.`;
                await twilioMessageServices.sendTextMessage(from, message);
            }

            return { handled: true, success: true };
        } catch (error) {
            console.error('Complete deposit processing error:', error);
            await twilioMessageServices.goBackTempMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async handleQuickDashboard(params, session, from, language) {
        try {
            const realAccounts = await crmApiServices.getAccounts(from, 'real') || [];
            const demoAccounts = await crmApiServices.getAccounts(from, 'demo') || [];
            const wallet = await crmApiServices.getWallet(from);
            const user = await userServices.find({ whatsappPhone: from });
            const userName = user?.firstName || "there";

            const imageData = {
                accountHolderName: userName,
                balance: wallet[0]?.balance || 0,
                currency: 'USD',
                realAccounts: realAccounts.map((acc, i) => ({
                    sn: i + 1,
                    name: acc.name || 'N/A',
                    amount: `$${acc.balance || 0}`
                })),
                demoAccounts: demoAccounts.map((acc, i) => ({
                    sn: i + 1,
                    name: acc.name || 'N/A',
                    amount: `$${acc.balance || 0}`
                }))
            };

            const waitMessage = language === 'arabic'
                ? '‚è≥ Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ŸäŸÜŸÖÿß ŸÜÿ¨ŸÑÿ® ÿ™ŸÅÿßÿµŸäŸÑ ÿ≠ÿ≥ÿßÿ®ŸÉ...'
                : '‚è≥ Please wait while we fetch your account details...';
            await twilioMessageServices.sendTextMessage(from, waitMessage);

            await twilioMessageServices.sendMediaFile(from, imageData, '');

            await new Promise(resolve => setTimeout(resolve, 2000));

            const welcomeMessage = language === 'arabic'
                ? `ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖÿå ${userName}!`
                : `Welcome to your dashboard, ${userName}!`;
            await twilioMessageServices.deshboardSectionTempMessage(from, welcomeMessage);

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick dashboard error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickBalance(params, session, from, language) {
        try {
            const wallet = await crmApiServices.getWallet(from);
            const balance = wallet && wallet.length > 0 ? wallet[0].balance : 0;

            const message = language === 'arabic'
                ? `üí∞ ÿ±ÿµŸäÿØ ŸÖÿ≠ŸÅÿ∏ÿ™ŸÉ ÿßŸÑÿ≠ÿßŸÑŸä: $${balance}`
                : `üí∞ Your current wallet balance: $${balance}`;
            await twilioMessageServices.sendTextMessage(from, message);

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick balance error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickHistory(params, session, from, language) {
        try {
            const history = await crmApiServices.getHistory(from);
            const user = await userServices.find({ whatsappPhone: from });
            const userName = user?.firstName || "there";

            if (history && history.transactions && history.transactions.length > 0) {
                const imageData = {
                    accountHolderName: userName,
                    transactionHistory: history.transactions.map((item, index) => ({
                        sn: index + 1,
                        date: item.createdAt ? item.createdAt.split('T')[0] : 'N/A',
                        type: item.type,
                        status: item.status,
                        amount: `$${item.amount}`,
                    }))
                };

                const waitMessage = language === 'arabic'
                    ? '‚è≥ Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ÿ®ŸäŸÜŸÖÿß ŸÜÿ¨ŸÑÿ® ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™...'
                    : '‚è≥ Please wait while we fetch your transaction history...';
                await twilioMessageServices.sendTextMessage(from, waitMessage);

                await twilioMessageServices.sendTransactionFile(from, imageData, '');
            } else {
                const message = language === 'arabic'
                    ? 'üìÑ ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿπÿßŸÖŸÑÿßÿ™ ŸÅŸä ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ÿ≠ÿ™Ÿâ ÿßŸÑÿ¢ŸÜ.'
                    : 'üìÑ No transaction history found yet.';
                await twilioMessageServices.sendTextMessage(from, message);
            }

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick history error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickKYC(params, session, from, language) {
        try {
            const message = language === 'arabic'
                ? 'üîç ÿ®ÿØÿ° ÿπŸÖŸÑŸäÿ© ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸáŸàŸäÿ©...'
                : 'üîç Starting KYC verification process...';
            await twilioMessageServices.sendTextMessage(from, message);

            session.step = 'kyc-start';
            await this.saveSession(from, session);
            await twilioMessageServices.kycProcessStartTempMessage(from);

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick KYC error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickCreateAccount(params, session, from, language) {
        try {
            if (params.type && params.name) {
                // Complete information provided - create account immediately
                return await this.processCompleteCreateAccount(params, session, from, language);
            } else if (params.type && !params.name) {
                // Type provided but no name - ask for account name
                const message = language === 'arabic'
                    ? `Ÿäÿ±ÿ¨Ÿâ ÿ™ŸÇÿØŸäŸÖ ÿßÿ≥ŸÖ ŸÑŸÑÿ≠ÿ≥ÿßÿ® ${params.type === 'demo' ? 'ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä' : 'ÿßŸÑÿ≠ŸÇŸäŸÇŸä'}:`
                    : `Please provide a name for your ${params.type} account:`;
                await twilioMessageServices.sendTextMessage(from, message);

                // Set up session for name input
                session.data = session.data || {};
                session.data.accountType = params.type;
                session.step = 'quick-create-account-name';
                await this.saveSession(from, session);
                return { handled: true, success: false };
            } else if (!params.type && params.name) {
                // Name provided but no type - show account type selection
                session.data = session.data || {};
                session.data.accountName = params.name;
                session.step = 'create-trading-account';
                await this.saveSession(from, session);

                const message = language === 'arabic'
                    ? `ÿ±ÿßÿ¶ÿπ! ÿ™ÿ±ŸäÿØ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ÿ®ÿßÿ≥ŸÖ "${params.name}". Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ŸÜŸàÿπ ÿßŸÑÿ≠ÿ≥ÿßÿ®:`
                    : `Great! You want to create an account named "${params.name}". Please select account type:`;

                // await twilioMessageServices.sendTextMessage(from, message);
                await twilioMessageServices.createTradingAccountTempMessage(from);
                return { handled: true, success: true };
            } else {
                // No type or name - show full account creation template
                session.step = 'create-trading-account';
                await this.saveSession(from, session);

                const message = language === 'arabic'
                    ? 'Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ŸÜŸàÿπ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ•ŸÜÿ¥ÿßÿ§Ÿá:'
                    : 'Please select the type of account you want to create:';

                await twilioMessageServices.sendTextMessage(from, message);
                await twilioMessageServices.createTradingAccountTempMessage(from);
                return { handled: true, success: true };
            }
        } catch (error) {
            console.error('Quick create account error:', error);
            await twilioMessageServices.sendTextMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async processCompleteCreateAccount(params, session, from, language) {
        try {
            const accountData = {
                name: params.name,
                balance: params.type === 'demo' ? 10000 : 0
            };

            const result = await crmApiServices.createTradingAccount(from, params.type, accountData);

            const message = language === 'arabic'
                ? `‚úÖ ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ${params.type === 'demo' ? 'ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä' : 'ÿ≠ŸÇŸäŸÇŸä'} ÿ®ŸÜÿ¨ÿßÿ≠: ${params.name}`
                : `‚úÖ ${params.type === 'demo' ? 'Demo' : 'Real'} account created successfully: ${params.name}`;
            await twilioMessageServices.sendTextMessage(from, message);

            return { handled: true, success: true };
        } catch (error) {
            console.error('Complete create account processing error:', error);
            await twilioMessageServices.sendTextMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async handleQuickWithdraw(params, session, from, language) {
        try {
            if (params.amount && params.paymentMethod) {
                // Complete information provided - process immediately
                return await this.processCompleteWithdraw(params, session, from, language);
            } else if (params.amount && !params.paymentMethod) {
                // Amount provided but no payment method - ask for payment method
                const message = language === 'arabic'
                    ? `Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≠ÿØŸäÿØ ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ≥ÿ≠ÿ® ŸÑŸÑŸÖÿ®ŸÑÿ∫ $${params.amount}. (match2pay ÿ£Ÿà wishmoney)`
                    : `Please specify the withdrawal method for $${params.amount}. (match2pay or wishmoney)`;
                await twilioMessageServices.sendTextMessage(from, message);

                // Set up session for payment method input
                session.data = session.data || {};
                session.data.withdrawAmount = params.amount;
                session.step = 'quick-withdraw-method-input';
                await this.saveSession(from, session);
                return { handled: true, success: false };
            } else if (!params.amount && params.paymentMethod) {
                // Payment method provided but no amount - ask for amount
                const message = language === 'arabic'
                    ? `Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ≥ÿ≠ÿ®Ÿá ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ${params.paymentMethod}. (ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ÿØŸÜŸâ: $10)`
                    : `Please specify the amount you want to withdraw using ${params.paymentMethod}. (Minimum: $10)`;
                await twilioMessageServices.sendTextMessage(from, message);

                // Set up session for amount input
                session.data = session.data || {};
                session.data.selectedPaymentGatewayName = params.paymentMethod;
                session.step = 'quick-withdraw-amount-input';
                await this.saveSession(from, session);
                return { handled: true, success: false };
            } else {
                // No amount or payment method - show full withdraw template
                const wallets = await crmApiServices.getWallet(from);
                if (!wallets || wallets.length === 0) {
                    const message = language === 'arabic'
                        ? '‚ùå ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿ≠ÿßŸÅÿ∏ ŸÖÿ™ÿßÿ≠ÿ© ŸÑŸÑÿ≥ÿ≠ÿ®. Ÿäÿ±ÿ¨Ÿâ ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≠ŸÅÿ∏ÿ© ÿ£ŸàŸÑÿßŸã.'
                        : '‚ùå No wallets available for withdrawal. Please create a wallet first.';
                    await twilioMessageServices.sendTextMessage(from, message);
                    return { handled: true, success: false };
                }

                const balance = (wallets[0]?.balance || 0).toFixed(3) || 0;
                session.step = 'dashboard-withdraw-options';
                await this.saveSession(from, session);

                const message = language === 'arabic'
                    ? 'Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ≥ÿ≠ÿ®:'
                    : 'Please select your withdrawal method:';

                await twilioMessageServices.sendTextMessage(from, message);
                await twilioMessageServices.deshboardWithdrawTempMessage(from, balance);
                return { handled: true, success: true };
            }
        } catch (error) {
            console.error('Quick withdraw error:', error);
            await twilioMessageServices.goBackTempMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async processCompleteWithdraw(params, session, from, language) {
        try {
            const wallet = await crmApiServices.getWallet(from);
            const balance = wallet && wallet.length > 0 ? wallet[0].balance : 0;

            if (params.amount > balance) {
                const message = language === 'arabic'
                    ? `‚ùå ÿßŸÑÿ±ÿµŸäÿØ ÿßŸÑÿ≠ÿßŸÑŸä ($${balance}) ÿ£ŸÇŸÑ ŸÖŸÜ ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑŸÖÿ∑ŸÑŸàÿ® ($${params.amount}).`
                    : `‚ùå Your current balance ($${balance}) is less than the requested amount ($${params.amount}).`;
                await twilioMessageServices.goBackTempMessage(from, message);
                return { handled: true, success: false };
            }

            // Get payment gateways
            const paymentGateways = await crmApiServices.getPaymentGateway(from);
            const gateway = paymentGateways.find(g =>
                g.uniqueName.toLowerCase() === params.paymentMethod.toLowerCase() ||
                g.uniqueName.toLowerCase().includes(params.paymentMethod.toLowerCase())
            );

            if (!gateway) {
                const message = language === 'arabic'
                    ? `‚ùå ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿ≥ÿ≠ÿ® ${params.paymentMethod} ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠ÿ©.`
                    : `‚ùå Withdrawal method ${params.paymentMethod} is not available.`;
                await twilioMessageServices.goBackTempMessage(from, message);
                return { handled: true, success: false };
            }

            // Set up session for withdrawal processing
            session.data = session.data || {};
            session.data.walletId = wallet[0]._id;
            session.data.selectedPaymentGateway = gateway._id;
            session.data.selectedPaymentGatewayName = gateway.uniqueName;
            session.data.withdrawAmount = params.amount;

            // Ask for additional required info based on payment method
            if (gateway.uniqueName === 'match2pay') {
                session.step = 'dashboard-withdraw-match2pay-address';
                await this.saveSession(from, session);
                const message = language === 'arabic'
                    ? 'Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿπŸÜŸàÿßŸÜ ÿßŸÑŸàÿ¨Ÿáÿ© ŸÑÿ≥ÿ≠ÿ® Match2Pay:'
                    : 'Please enter your destination address for Match2Pay withdrawal:';
                await twilioMessageServices.goBackTempMessage(from, message);
            } else if (gateway.uniqueName === 'whishMoney') {
                session.step = 'dashboard-withdraw-wishmoney-phone';
                await this.saveSession(from, session);
                const message = language === 'arabic'
                    ? 'Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ŸÑÿßÿ≥ÿ™ŸÑÿßŸÖ ÿ≥ÿ≠ÿ® Whish Money:'
                    : 'Please enter the phone number to receive the Whish Money withdrawal:';
                await twilioMessageServices.sendTextMessage(from, message);
            }

            return { handled: true, success: true };
        } catch (error) {
            console.error('Complete withdraw processing error:', error);
            await twilioMessageServices.goBackTempMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async handleQuickTransfer(params, session, from, language) {
        try {
            if (params.amount && params.from && params.to) {
                // Complete information provided - process immediately
                return await this.processCompleteTransfer(params, session, from, language);
            } else {
                // Incomplete information - guide to transfer template
                const message = language === 'arabic'
                    ? 'ÿØÿπŸÜŸä ÿ£ÿ≥ÿßÿπÿØŸÉ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ. Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿµÿØÿ±:'
                    : 'Let me help you with the transfer. Please select the source account:';
                await twilioMessageServices.sendTextMessage(from, message);

                // Set up transfer flow
                session.step = 'dashboard-transfer-select-source';
                session.data = session.data || {};
                await this.saveSession(from, session);

                // Get both wallets and accounts for source selection
                const wallets = await crmApiServices.getWallet(from);
                const accounts = await crmApiServices.getAccounts(from, 'real');

                if ((!wallets || wallets.length === 0) && (!accounts || accounts.length === 0)) {
                    const message = language === 'arabic'
                        ? '‚ùå ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿ≠ÿßŸÅÿ∏ ÿ£Ÿà ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿ™ÿØÿßŸàŸÑ ŸÖÿ™ÿßÿ≠ÿ©.'
                        : '‚ùå You don\'t have any wallets or trading accounts available.';
                    await twilioMessageServices.goBackTempMessage(from, message);
                    return { handled: true, success: false };
                }

                // Store for reference
                session.data.wallets = wallets;
                session.data.accounts = accounts;
                await this.saveSession(from, session);

                // Build source account list
                let sourceAccountListMessage = `*Select Source Account*\n\n`;

                if (wallets && wallets.length > 0) {
                    wallets.forEach((wallet, index) => {
                        sourceAccountListMessage += `${index + 1}. *Wallet* - $${wallet.balance || 0}\n\n`;
                    });
                }

                let startIndex = (wallets && wallets.length) || 0;
                if (accounts && accounts.length > 0) {
                    accounts.forEach((acc, index) => {
                        sourceAccountListMessage += `${startIndex + index + 1}. ${acc?.name || ''}(*${acc?.client_login || 'Account'}*) - $${acc?.balance || 0}\n`;
                    });
                }

                sourceAccountListMessage += `\n\nPlease select a source account by replying with the number (e.g. "1").`;
                await twilioMessageServices.sendTextMessage(from, sourceAccountListMessage);

                return { handled: true, success: true };
            }
        } catch (error) {
            console.error('Quick transfer error:', error);
            await twilioMessageServices.goBackTempMessage(from, error.message);
            return { handled: true, success: false };
        }
    }

    async processCompleteTransfer(params, session, from, language) {
        try {
            // Implementation for complete transfer would go here
            // For now, redirect to template flow
            const message = language === 'arabic'
                ? 'ÿßŸÑÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ ŸÖÿ™ÿßÿ≠ ÿπÿ®ÿ± ÿßŸÑŸÇÿßÿ¶ŸÖÿ©. ÿØÿπŸÜŸä ÿ£Ÿàÿ¨ŸáŸÉ:'
                : 'Advanced transfer is available through the menu. Let me guide you:';
            await twilioMessageServices.sendTextMessage(from, message);

            return await this.handleQuickTransfer({}, session, from, language);
        } catch (error) {
            console.error('Complete transfer processing error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickReferEarn(params, session, from, language) {
        try {
            const referralLink = await crmApiServices.getReferalLink(from);
            if (referralLink) {
                const referralCode = referralLink.split('/').pop() || referralLink.split('=').pop() || 'REF123';
                const whatsappBusinessNumber = process.env.TWILIO_WHATSAPP_NUMBER || '+1234567890';
                const whatsappJoinLink = `https://wa.me/${whatsappBusinessNumber}?text=Hi%20BBCorp!%20I%20want%20to%20join%20with%20referral%20code:%20${referralCode}`;

                const message = language === 'arabic'
                    ? `ü§ù *ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿßŸÑÿ•ÿ≠ÿßŸÑÿ© ŸàÿßŸÑÿ±ÿ®ÿ≠!*\n\n` +
                    `ÿ¥ÿßÿ±ŸÉ Ÿáÿ∞Ÿá ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ŸÖÿπ ÿ£ÿµÿØŸÇÿßÿ¶ŸÉ ŸÑŸÉÿ≥ÿ® ÿßŸÑŸÖŸÉÿßŸÅÿ¢ÿ™:\n\n` +
                    `üìé *ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿ•ÿ≠ÿßŸÑÿ©:*\n${referralLink}\n\n` +
                    `üí¨ *ÿ±ÿßÿ®ÿ∑ WhatsApp:*\n${whatsappJoinLink}\n\n` +
                    `üéÅ *ŸÉŸàÿØ ÿßŸÑÿ•ÿ≠ÿßŸÑÿ©:* \`${referralCode}\`\n\n` +
                    `‚ú® ŸÉŸäŸÅ ŸäÿπŸÖŸÑ: ÿ¥ÿßÿ±ŸÉ ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ÿå ÿ£ÿµÿØŸÇÿßÿ§ŸÉ ŸäŸÜÿ∂ŸÖŸàŸÜÿå ÿ™ÿ±ÿ®ÿ≠ŸàŸÜ ŸÖÿπÿßŸã!`
                    : `ü§ù *Refer and Earn Program!*\n\n` +
                    `Share these links with your friends to earn rewards:\n\n` +
                    `üìé *Website Referral Link:*\n${referralLink}\n\n` +
                    `üí¨ *WhatsApp Join Link:*\n${whatsappJoinLink}\n\n` +
                    `üéÅ *Your Referral Code:* \`${referralCode}\`\n\n` +
                    `‚ú® Share the links, friends join, you both earn when they start trading!`;

                await twilioMessageServices.goBackTempMessage(from, message);
            } else {
                const message = language === 'arabic'
                    ? '‚ùå ÿ∫Ÿäÿ± ŸÇÿßÿØÿ± ÿπŸÑŸâ ÿ•ŸÜÿ¥ÿßÿ° ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿ•ÿ≠ÿßŸÑÿ© ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä.'
                    : '‚ùå Unable to generate referral link at the moment.';
                await twilioMessageServices.goBackTempMessage(from, message);
            }

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick refer earn error:', error);
            const message = language === 'arabic'
                ? '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿ•ÿ≠ÿßŸÑÿ©.'
                : '‚ùå Error fetching your referral link.';
            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: false };
        }
    }

    async handleQuickSupport(params, session, from, language) {
        try {
            const message = language === 'arabic'
                ? `üìû ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿØÿπŸÖÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÜÿß:\n` +
                `- *ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä*: support@gmail.com\n` +
                `- *ÿßŸÑŸáÿßÿ™ŸÅ*: +1234567890\n` +
                `- *WhatsApp*: +1234567890\n\n` +
                `ŸÅÿ±ŸäŸÇ ÿßŸÑÿØÿπŸÖ ŸÖÿ™ÿßÿ≠ 24/7 ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ.`
                : `üìû For support, please contact us at:\n` +
                `- *Email*: support@gmail.com\n` +
                `- *Phone*: +1234567890\n` +
                `- *WhatsApp*: +1234567890\n\n` +
                `Our support team is available 24/7 to assist you.`;

            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick support error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickGreeting(params, session, from, language) {
        try {
            const user = await userServices.find({ whatsappPhone: from });
            const userName = user?.firstName || "there";

            const message = language === 'arabic'
                ? `ŸÖÿ±ÿ≠ÿ®ÿßŸã ${userName}! üëã ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ∞ŸÉŸä ŸÑŸÄ BBCorp. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü\n\nŸäŸÖŸÉŸÜŸÉ ÿ£ŸÜ ÿ™ÿ≥ÿ£ŸÑ ÿπŸÜ:\n‚Ä¢ ÿßŸÑÿ±ÿµŸäÿØ\n‚Ä¢ ÿßŸÑÿ•ŸäÿØÿßÿπ ŸàÿßŸÑÿ≥ÿ≠ÿ®\n‚Ä¢ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®\n‚Ä¢ ÿßŸÑÿ™ÿßÿ±ŸäÿÆ\n‚Ä¢ ÿ£Ÿà ÿ£Ÿä ÿ¥Ÿäÿ° ÿ¢ÿÆÿ±!`
                : `Hello ${userName}! üëã I'm your AI assistant for BBCorp. How can I help you today?\n\nYou can ask about:\n‚Ä¢ Balance\n‚Ä¢ Deposit & Withdraw\n‚Ä¢ Create Account\n‚Ä¢ History\n‚Ä¢ Or anything else!`;

            await twilioMessageServices.sendTextMessage(from, message);

            // Show appropriate menu
            if (await this.checkAuthentication(from)) {
                session.step = 'main-menu';
                await this.saveSession(from, session);
                await twilioMessageServices.mainListTempMessage(from);
            } else {
                await twilioMessageServices.authTempate(from);
            }

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick greeting error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickAccountInfo(params, session, from, language) {
        try {
            const realAccounts = await crmApiServices.getAccounts(from, 'real') || [];
            const demoAccounts = await crmApiServices.getAccounts(from, 'demo') || [];

            let accountsMessage = language === 'arabic' ? "üè¶ ÿ≠ÿ≥ÿßÿ®ÿßÿ™ŸÉ:\n\n" : "üè¶ Your Accounts:\n\n";

            accountsMessage += language === 'arabic' ? "ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑÿ≠ŸÇŸäŸÇŸäÿ©:\n" : "Real Accounts:\n";
            if (realAccounts.length > 0) {
                accountsMessage += realAccounts.map((acc, i) =>
                    `${i + 1}. ${acc.name || 'N/A'}: $${acc.balance || 0}`).join('\n') + "\n\n";
                const totalReal = realAccounts.reduce((sum, acc) => sum + (acc.balance || 0), 0);
                accountsMessage += language === 'arabic' ? `ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ±ÿµŸäÿØ ÿßŸÑÿ≠ŸÇŸäŸÇŸä: $${totalReal}\n\n` : `Total Real Balance: $${totalReal}\n\n`;
            } else {
                accountsMessage += language === 'arabic' ? "üìÇ ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿ≠ŸÇŸäŸÇŸäÿ©.\n\n" : "üìÇ No real accounts found.\n\n";
            }

            accountsMessage += language === 'arabic' ? "ÿßŸÑÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©:\n" : "Demo Accounts:\n";
            if (demoAccounts.length > 0) {
                accountsMessage += demoAccounts.map((acc, i) =>
                    `${i + 1}. ${acc.name || 'N/A'}: $${acc.balance || 0}`).join('\n') + "\n\n";
                const totalDemo = demoAccounts.reduce((sum, acc) => sum + (acc.balance || 0), 0);
                accountsMessage += language === 'arabic' ? `ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ±ÿµŸäÿØ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä: $${totalDemo}` : `Total Demo Balance: $${totalDemo}`;
            } else {
                accountsMessage += language === 'arabic' ? "üìÇ ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ≠ÿ≥ÿßÿ®ÿßÿ™ ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©." : "üìÇ No demo accounts found.";
            }

            await twilioMessageServices.goBackTempMessage(from, accountsMessage);
            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick account info error:', error);
            const message = language === 'arabic'
                ? '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®.'
                : '‚ùå Error fetching account information.';
            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: false };
        }
    }

    async handleQuickPaymentMethods(params, session, from, language) {
        try {
            const paymentGateways = await crmApiServices.getPaymentGateway(from);

            if (!paymentGateways || paymentGateways.length === 0) {
                const message = language === 'arabic'
                    ? '‚ùå ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∑ÿ±ŸÇ ÿØŸÅÿπ ŸÖÿ™ÿßÿ≠ÿ© ŸÅŸä ÿßŸÑŸàŸÇÿ™ ÿßŸÑÿ≠ÿßŸÑŸä.'
                    : '‚ùå No payment methods are available at the moment.';
                await twilioMessageServices.goBackTempMessage(from, message);
                return { handled: true, success: false };
            }

            const methodsList = paymentGateways.map((gateway, index) =>
                `${index + 1}. ${gateway.uniqueName}`
            ).join('\n');

            const message = language === 'arabic'
                ? `üí≥ ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:\n\n${methodsList}\n\nŸäŸÖŸÉŸÜŸÉ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£Ÿä ŸÖŸÜ Ÿáÿ∞Ÿá ÿßŸÑÿ∑ÿ±ŸÇ ŸÑŸÑÿ•ŸäÿØÿßÿπ ŸàÿßŸÑÿ≥ÿ≠ÿ®.`
                : `üí≥ Available Payment Methods:\n\n${methodsList}\n\nYou can use any of these methods for deposit and withdrawal.`;

            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick payment methods error:', error);
            const message = language === 'arabic'
                ? '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ.'
                : '‚ùå Error fetching payment methods.';
            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: false };
        }
    }

    async handleQuickCheckVerification(params, session, from, language) {
        try {
            const kycStatus = await crmApiServices.checkKycVerification(from);

            let statusMessage;
            if (kycStatus.status === 'approved') {
                statusMessage = language === 'arabic'
                    ? '‚úÖ ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸáŸàŸäÿ™ŸÉ ÿ®ŸÜÿ¨ÿßÿ≠!'
                    : '‚úÖ Your identity has been successfully verified!';
            } else if (kycStatus.status === 'pending') {
                statusMessage = language === 'arabic'
                    ? '‚è≥ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸáŸàŸäÿ© ŸÇŸäÿØ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ©. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±.'
                    : '‚è≥ Your identity verification is under review. Please wait.';
            } else if (kycStatus.status === 'rejected') {
                statusMessage = language === 'arabic'
                    ? '‚ùå ÿ™ŸÖ ÿ±ŸÅÿ∂ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸáŸàŸäÿ©. Ÿäÿ±ÿ¨Ÿâ ÿ•ÿπÿßÿØÿ© ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ©.'
                    : '‚ùå Identity verification was rejected. Please try again.';
            } else {
                statusMessage = language === 'arabic'
                    ? 'üìã ŸÑŸÖ ÿ™ŸÇŸÖ ÿ®ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ŸáŸàŸäÿ™ŸÉ ÿ®ÿπÿØ. ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿßŸÑÿ®ÿØÿ°ÿü'
                    : 'üìã You haven\'t completed identity verification yet. Would you like to start?';
            }

            await twilioMessageServices.goBackTempMessage(from, statusMessage);

            if (kycStatus.status === 'rejected' || !kycStatus.status) {
                // Offer to start KYC process
                return await this.handleQuickKYC(params, session, from, language);
            }

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick check verification error:', error);
            const message = language === 'arabic'
                ? '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ŸÅÿ≠ÿµ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ™ÿ≠ŸÇŸÇ.'
                : '‚ùå Error checking verification status.';
            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: false };
        }
    }

    async handleQuickLogout(params, session, from, language) {
        try {
            // Clear user data
            await userServices.deleteMany({ whatsappPhone: from });

            // Reset session
            session.step = 'language-selection';
            session.data = {};
            await this.saveSession(from, session);

            const message = language === 'arabic'
                ? 'ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠. ÿßŸÉÿ™ÿ® "Hi" ŸÑŸÑÿ®ÿØÿ° ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.'
                : 'You have been logged out successfully. Type "Hi" to start again.';

            await twilioMessageServices.sendTextMessage(from, message);
            await twilioMessageServices.languageTempMessage(from);

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick logout error:', error);
            const message = language === 'arabic'
                ? '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨.'
                : '‚ùå Error during logout.';
            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: false };
        }
    }

    async handleQuickMenu(params, session, from, language) {
        try {
            const message = language === 'arabic'
                ? 'ÿ•ŸÑŸäŸÉ ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:'
                : 'Here\'s the main menu:';

            await twilioMessageServices.sendTextMessage(from, message);

            // Show appropriate menu based on authentication
            if (await this.checkAuthentication(from)) {
                session.step = 'main-menu';
                await this.saveSession(from, session);
                await twilioMessageServices.mainListTempMessage(from);
            } else {
                await twilioMessageServices.authTempate(from);
            }

            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick menu error:', error);
            return { handled: false, error: error.message };
        }
    }

    async handleQuickHowToUse(params, session, from, language) {
        try {
            const message = language === 'arabic'
                ? `üìñ *ÿØŸÑŸäŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ - BBCorp WhatsApp Bot*\n\n` +
                `ü§ñ *ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑŸÖÿØŸÖÿ¨:*\n` +
                `ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿ™ÿ≠ÿØÿ´ ŸÖÿπŸä ÿ®ŸÑÿ∫ÿ™ŸÉ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©:\n` +
                `‚Ä¢ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©: "ÿ£ÿ±ŸäÿØ ÿ•ŸäÿØÿßÿπ 100 ÿØŸàŸÑÿßÿ±"\n` +
                `‚Ä¢ English: "Check my balance"\n` +
                `‚Ä¢ ‡§π‡§ø‡§Ç‡§¶‡•Ä: "‡§Æ‡•á‡§∞‡§æ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§ì" (English response)\n\n` +

                `üí∞ *ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©:*\n` +
                `‚Ä¢ ÿ•ŸäÿØÿßÿπ: "ÿ•ŸäÿØÿßÿπ 50 ÿØŸàŸÑÿßÿ± ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ wishmoney"\n` +
                `‚Ä¢ ÿ≥ÿ≠ÿ®: "ÿ≥ÿ≠ÿ® 25 ÿØŸàŸÑÿßÿ± ÿ•ŸÑŸâ match2pay"\n` +
                `‚Ä¢ ÿ™ÿ≠ŸàŸäŸÑ: "ÿ™ÿ≠ŸàŸäŸÑ 30 ÿØŸàŸÑÿßÿ± ÿ•ŸÑŸâ user@email.com"\n` +
                `‚Ä¢ ÿßŸÑÿ±ÿµŸäÿØ: "ÿ£ÿ∏Ÿáÿ± ÿ±ÿµŸäÿØŸä"\n\n` +

                `üì± *ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ≠ÿ≥ÿßÿ®:*\n` +
                `‚Ä¢ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ: "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ email@test.com password123"\n` +
                `‚Ä¢ ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®: "ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä ÿßÿ≥ŸÖŸá Test"\n` +
                `‚Ä¢ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®: "ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≠ÿ≥ÿßÿ®Ÿä"\n` +
                `‚Ä¢ ÿßŸÑÿ™ÿ≠ŸÇŸÇ: "ŸÅÿ≠ÿµ ÿßŸÑÿ™ÿ≠ŸÇŸÇ"\n\n` +

                `üéØ *ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿßŸÑÿ≥ÿ±Ÿäÿπÿ©:*\n` +
                `‚Ä¢ ÿßŸÑŸÇÿßÿ¶ŸÖÿ©: "ÿßŸÑŸÇÿßÿ¶ŸÖÿ©"\n` +
                `‚Ä¢ ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ©: "ÿ£ÿ≠ÿ™ÿßÿ¨ ŸÖÿ≥ÿßÿπÿØÿ©"\n` +
                `‚Ä¢ ÿßŸÑÿÆÿ±Ÿàÿ¨: "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿÆÿ±Ÿàÿ¨"\n` +
                `‚Ä¢ ÿßŸÑÿ•ÿ≠ÿßŸÑÿ©: "ÿ±ÿ®ÿ≠ ŸÖŸÜ ÿßŸÑÿ•ÿ≠ÿßŸÑÿ©"\n\n` +

                `üîò *ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑŸÇŸàÿßŸÑÿ®:*\n` +
                `ŸäŸÖŸÉŸÜŸÉ ÿ£Ÿäÿ∂ÿßŸã ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ™ŸÅÿßÿπŸÑŸäÿ© ÿßŸÑÿ™Ÿä ÿ™ÿ∏Ÿáÿ± ŸÅŸä ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©.\n\n` +

                `üåê *ÿØÿπŸÖ ŸÖÿ™ÿπÿØÿØ ÿßŸÑŸÑÿ∫ÿßÿ™:*\n` +
                `ÿßŸÑŸÜÿ∏ÿßŸÖ ŸäŸÅŸáŸÖ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©ÿå ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ©ÿå ŸàÿßŸÑŸáŸÜÿØŸäÿ© ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã.\n\n` +

                `üìû *ÿßŸÑÿØÿπŸÖ:*\n` +
                `ŸÑŸÑŸÖÿ≥ÿßÿπÿØÿ© ÿßŸÑÿ•ÿ∂ÿßŸÅŸäÿ©ÿå ÿßŸÉÿ™ÿ® "ÿØÿπŸÖ" ÿ£Ÿà "support"`
                : `üìñ *How to Use - BBCorp WhatsApp Bot*\n\n` +
                `ü§ñ *AI Assistant Features:*\n` +
                `You can talk to me in your preferred language:\n` +
                `‚Ä¢ Arabic: "ÿ£ÿ±ŸäÿØ ÿ•ŸäÿØÿßÿπ 100 ÿØŸàŸÑÿßÿ±"\n` +
                `‚Ä¢ English: "Check my balance"\n` +
                `‚Ä¢ Hindi: "‡§Æ‡•á‡§∞‡§æ ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§ì" (English response)\n\n` +

                `üí∞ *Financial Operations:*\n` +
                `‚Ä¢ Deposit: "Deposit 50 USD using wishmoney"\n` +
                `‚Ä¢ Withdraw: "Withdraw 25 USD to match2pay"\n` +
                `‚Ä¢ Transfer: "Transfer 30 USD to user@email.com"\n` +
                `‚Ä¢ Balance: "Show my balance"\n\n` +

                `üì± *Account Management:*\n` +
                `‚Ä¢ Login: "Login email@test.com password123"\n` +
                `‚Ä¢ Create Account: "Create demo account named Test"\n` +
                `‚Ä¢ Account Info: "My account info"\n` +
                `‚Ä¢ Verification: "Check verification"\n\n` +

                `üéØ *Quick Commands:*\n` +
                `‚Ä¢ Menu: "Show menu"\n` +
                `‚Ä¢ Support: "Need help"\n` +
                `‚Ä¢ Logout: "Logout"\n` +
                `‚Ä¢ Referral: "Refer and earn"\n\n` +

                `üîò *Template Buttons:*\n` +
                `You can also use the interactive buttons that appear in the chat.\n\n` +

                `üåê *Multi-Language Support:*\n` +
                `The system automatically detects Arabic, English, and Hindi.\n\n` +

                `üìû *Support:*\n` +
                `For additional help, type "support" or "ŸÖÿ≥ÿßÿπÿØÿ©"`;

            await twilioMessageServices.goBackTempMessage(from, message);
            return { handled: true, success: true };
        } catch (error) {
            console.error('Quick how to use error:', error);
            return { handled: false, error: error.message };
        }
    }

    // Helper method to save session
    async saveSession(whatsappPhone, session) {
        try {
            const prisma = new PrismaClient();

            const existingSession = await prisma.userSession.findFirst({
                where: { whatsappPhone }
            });

            const sessionData = {
                step: session.step,
                userFlow: session.userFlow || 'whatsapp-template',
                data: JSON.stringify(session.data || {}),
                language: session.language
            };

            if (existingSession) {
                await prisma.userSession.update({
                    where: { id: existingSession.id },
                    data: sessionData
                });
            } else {
                await prisma.userSession.create({
                    data: {
                        whatsappPhone,
                        ...sessionData
                    }
                });
            }

            await prisma.$disconnect();
            return true;
        } catch (error) {
            console.error('Error saving session:', error);
            return false;
        }
    }

    async analyzeUserIntent(message, session, isAuthenticated) {
        try {
            const detectedLanguage = await this.detectLanguage(message);

            // Try AI analysis first
            try {
                return await this.analyzeWithAI(message, session, isAuthenticated, detectedLanguage);
            } catch (error) {
                console.warn('AI analysis failed, falling back to pattern matching:', error.message);
                return { status: "error", message: "AI analysis failed, falling back to pattern matching." };
                // Fallback to pattern matching
                // return await this.analyzeWithPatterns(message, session, isAuthenticated, detectedLanguage);
            }

        } catch (error) {
            console.error('Intent analysis error:', error);
            return { status: "error", message: error.message || "Failed to analyze intent" };
        }
    }

    async analyzeWithAI(message, session, isAuthenticated, detectedLanguage) {

        const systemPrompt = `
                You are an intelligent multilingual assistant for a WhatsApp-based trading CRM system. 
                Analyze user messages in English, Hindi, or Arabic and extract intent and parameters.

                LANGUAGE DETECTION:
                - Arabic text: Use Arabic functionality
                - Hindi/English text: Use English functionality
                
                SUPPORTED LANGUAGES & EXAMPLES:
                English/Hindi: "login user@email.com password123", "deposit 100 USD using wishmoney"
                Arabic: "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ user@email.com password123", "ÿ•ŸäÿØÿßÿπ 100 ÿØŸàŸÑÿßÿ± ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ wishmoney"

                Available intents and their requirements:
                1. greeting - Welcome messages (hi, hello, hey, ‡§π‡•à‡§≤‡•ã, ŸÖÿ±ÿ≠ÿ®ÿß)
                2. login - Login requests (login, sign in, ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ, ‡§≤‡•â‡§ó‡§ø‡§®) - Extract email and password
                3. signup - Registration requests (signup, register, ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®, ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞) - Extract name, email, password, phone
                4. dashboard - View account overview (dashboard, ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ, ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°) - needs auth
                5. deposit - Add money (deposit, ÿ•ŸäÿØÿßÿπ, ‡§ú‡§Æ‡§æ) - Extract amount, payment method
                6. withdraw - Withdraw money (withdraw, ÿ≥ÿ≠ÿ®, ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡§æ) - Extract amount, payment method  
                7. transfer - Transfer between accounts (transfer, ÿ™ÿ≠ŸàŸäŸÑ, ‡§∏‡•ç‡§•‡§æ‡§®‡§æ‡§Ç‡§§‡§∞‡§£) - Extract amount, from, to
                8. create_account - Create trading account (create account, ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®, ‡§ñ‡§æ‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç) - Extract type, name
                9. check_balance - Check balance (balance, ÿ±ÿµŸäÿØ, ‡§¨‡•à‡§≤‡•á‡§Ç‡§∏) - needs auth
                10. history - Transaction history (history, ÿ™ÿßÿ±ŸäÿÆ, ‡§á‡§§‡§ø‡§π‡§æ‡§∏) - needs auth
                11. kyc - KYC verification (kyc, verification, ÿ™ÿ≠ŸÇŸÇ, ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§®) - needs auth
                12. refer_earn - Referral program (refer, ÿ•ÿ≠ÿßŸÑÿ©, ‡§∞‡•á‡§´‡§∞) - needs auth
                13. support - Help and support (help, support, ŸÖÿ≥ÿßÿπÿØÿ©, ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ)
                14. account_info - Account details (account info, ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®, ‡§ñ‡§æ‡§§‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä) - needs auth
                15. payment_methods - Payment options (payment methods, ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ, ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§µ‡§ø‡§ß‡§ø) - needs auth
                16. check_verification - Check KYC status (check verification, ŸÅÿ≠ÿµ ÿßŸÑÿ™ÿ≠ŸÇŸÇ, ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç) - needs auth
                17. logout - Sign out (logout, ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨, ‡§≤‡•â‡§ó‡§Ü‡§â‡§ü) - needs auth
                18. menu - Show main menu (menu, ŸÇÿßÿ¶ŸÖÿ©, ‡§Æ‡•á‡§®‡•Ç)
                19. how_to_use - Usage guide and instructions (how to use, guide, help guide, ŸÉŸäŸÅŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ, ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ó‡§æ‡§á‡§°)

                ENHANCED SMART PARSING RULES:
                
                LOGIN PATTERNS:
                - "login email@domain.com password123"
                - "sign in with user@email.com mypass"
                - "log me in user@test.com 12345"
                - "‡§§‡§∏ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ user@email.com password"
                - "‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç user@email.com password123"

                DEPOSIT PATTERNS:
                - "deposit 100 usdt using wishmoney"
                - "add 50 dollars via match2pay" 
                - "I want to deposit 10 USD using wishmoney"
                - "fund my account with 200 dollars via match2pay"
                - "put 75 usdt in my account using whish money"
                - "load 150 dollars with bank transfer"
                - "ÿ•ŸäÿØÿßÿπ 100 ÿØŸàŸÑÿßÿ± ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ wishmoney"
                - "100 ‡§°‡•â‡§≤‡§∞ ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç wishmoney ‡§ï‡•á ‡§∏‡§æ‡§•"

                SIGNUP PATTERNS:
                - "signup John Doe john@email.com password123 +1234567890"
                - "register with name John email john@test.com password abc123 phone +123456"
                - "create account John john@email.com pass123 +1234567890"
                - "ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ÿ¨ŸàŸÜ john@email.com password123 +1234567890"

                CREATE ACCOUNT PATTERNS:
                - "create demo account named Test"
                - "make real account called MyAccount"
                - "ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ÿ™ÿ¨ÿ±Ÿäÿ®Ÿä ÿ®ÿßÿ≥ŸÖ Test"
                - "‡§ü‡•á‡§∏‡•ç‡§ü ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§°‡•á‡§Æ‡•ã ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç"

                WITHDRAW PATTERNS:
                - "withdraw 100 USD using match2pay"
                - "take out 50 dollars via wishmoney"
                - "I want to withdraw 75 USDT using match2pay"
                - "cash out 200 dollars with wishmoney"
                - "ÿ≥ÿ≠ÿ® 100 ÿØŸàŸÑÿßÿ± ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ match2pay"
                - "100 ‡§°‡•â‡§≤‡§∞ ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç wishmoney ‡§∏‡•á"

                TRANSFER PATTERNS:
                - "transfer 100 from wallet to account"
                - "move 50 dollars from account to wallet"
                - "send 25 USD from my wallet to trading account"
                - "ÿ™ÿ≠ŸàŸäŸÑ 100 ÿØŸàŸÑÿßÿ± ŸÖŸÜ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ© ÿ•ŸÑŸâ ÿßŸÑÿ≠ÿ≥ÿßÿ®"
                - "‡§µ‡•â‡§≤‡•á‡§ü ‡§∏‡•á ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§Æ‡•á‡§Ç 100 ‡§°‡•â‡§≤‡§∞ ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§∏‡§´‡§∞ ‡§ï‡§∞‡•á‡§Ç"

                BALANCE/INFO PATTERNS:
                - "show my balance", "what's my balance", "check balance"
                - "account info", "my accounts", "show accounts"
                - "payment methods", "how can I pay", "deposit options"
                - "verification status", "check kyc", "am I verified"
                - "ÿπÿ±ÿ∂ ÿßŸÑÿ±ÿµŸäÿØ", "ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ≠ÿ≥ÿßÿ®", "ÿ∑ÿ±ŸÇ ÿßŸÑÿØŸÅÿπ"
                - "‡§¨‡•à‡§≤‡•á‡§Ç‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç", "‡§ñ‡§æ‡§§‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä", "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§µ‡§ø‡§ß‡§ø"

                SUPPORT/MENU PATTERNS:
                - "help", "support", "need help", "contact support"
                - "menu", "main menu", "show options", "what can I do"
                - "refer", "referral", "invite friends", "earn money"
                - "logout", "sign out", "exit", "log me out"
                - "ŸÖÿ≥ÿßÿπÿØÿ©", "ŸÇÿßÿ¶ŸÖÿ©", "ÿ•ÿ≠ÿßŸÑÿ©", "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨"
                - "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", "‡§Æ‡•á‡§®‡•Ç", "‡§∞‡•á‡§´‡§∞", "‡§≤‡•â‡§ó‡§Ü‡§â‡§ü"

                GREETING PATTERNS:
                - "hi", "hello", "hey", "good morning", "good afternoon"
                - "ŸÖÿ±ÿ≠ÿ®ÿß", "ÿ£ŸáŸÑÿß", "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ"
                - "‡§π‡•à‡§≤‡•ã", "‡§®‡§Æ‡§∏‡•ç‡§§‡•á", "‡§π‡§æ‡§Ø"

                HOW TO USE PATTERNS:
                - "how to use", "usage guide", "help guide", "instructions"
                - "how does this work", "what can I do", "feature guide"
                - "ŸÉŸäŸÅŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ", "ÿØŸÑŸäŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ", "ÿ™ÿπŸÑŸäŸÖÿßÿ™"
                - "‡§â‡§™‡§Ø‡•ã‡§ó ‡§ó‡§æ‡§á‡§°", "‡§ï‡•à‡§∏‡•á ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç", "‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂"

                PAYMENT METHODS: wishmoney, whish money, match2pay, match 2 pay, banktransfer, bank transfer
                CURRENCIES: USD, USDT, dollars, dollar, $, bucks, ÿØŸàŸÑÿßÿ±, ‡§°‡•â‡§≤‡§∞
                AMOUNTS: Look for numbers with currency indicators

                Current user context:
                - Authenticated: ${isAuthenticated}
                - Session: ${session ? JSON.stringify(session) : 'none'}
                - Detected Language: ${detectedLanguage}

                RESPONSE FORMAT - Return JSON with:
                {
                "intent": "detected_intent",
                "params": {"extracted_parameters": "values"},
                "needsAuth": true/false,
                "confidence": 0.0-1.0,
                "hasCompleteInfo": true/false,
                "language": "${detectedLanguage}",
                "response": "optional_immediate_response"
                }

                EXAMPLES:
                "Hi" ‚Üí {"intent": "greeting", "params": {}, "needsAuth": false, "confidence": 0.9, "hasCompleteInfo": true, "language": "english"}
                
                "Login user@email.com pass123" ‚Üí {"intent": "login", "params": {"email": "user@email.com", "password": "pass123"}, "needsAuth": false, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Deposit 100 USD using wishmoney" ‚Üí {"intent": "deposit", "params": {"amount": 100, "currency": "USD", "paymentMethod": "wishmoney"}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "ÿ•ŸäÿØÿßÿπ 50 ÿØŸàŸÑÿßÿ± ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ match2pay" ‚Üí {"intent": "deposit", "params": {"amount": 50, "currency": "USD", "paymentMethod": "match2pay"}, "needsAuth": true, "confidence": 0.9, "hasCompleteInfo": true, "language": "arabic"}
                
                "Withdraw 50 USD to wishmoney" ‚Üí {"intent": "withdraw", "params": {"amount": 50, "currency": "USD", "paymentMethod": "wishmoney"}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Transfer 25 USD to user@email.com" ‚Üí {"intent": "transfer", "params": {"amount": 25, "currency": "USD", "email": "user@email.com"}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Show my balance" ‚Üí {"intent": "check_balance", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "My account info" ‚Üí {"intent": "account_info", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Show payment methods" ‚Üí {"intent": "payment_methods", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Check verification" ‚Üí {"intent": "check_verification", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Earn from referrals" ‚Üí {"intent": "refer_earn", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Need support" ‚Üí {"intent": "support", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Show menu" ‚Üí {"intent": "menu", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "Logout" ‚Üí {"intent": "logout", "params": {}, "needsAuth": true, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "How to use" ‚Üí {"intent": "how_to_use", "params": {}, "needsAuth": false, "confidence": 0.95, "hasCompleteInfo": true, "language": "english"}
                
                "ŸÉŸäŸÅŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ" ‚Üí {"intent": "how_to_use", "params": {}, "needsAuth": false, "confidence": 0.95, "hasCompleteInfo": true, "language": "arabic"}
                
                "Create demo account named Test" ‚Üí {"intent": "create_account", "params": {"type": "demo", "name": "Test"}, "needsAuth": true, "confidence": 0.9, "hasCompleteInfo": true, "language": "english"}

                Analyze this message: "${message}"
            `;

        const messages = [
            { role: "system", content: systemPrompt },
            { role: "user", content: message }
        ];

        const response = await this.callAI({
            model: this.getModelName(),
            messages,
            response_format: { type: "json_object" },
            temperature: 0.1
        });

        if (!response?.choices?.[0]?.message?.content) {
            throw new Error("Invalid AI response format");
        }

        const result = JSON.parse(response.choices[0].message.content);
        return { status: "success", ...result };
    }

    // Fallback pattern matching when AI is unavailable
    async analyzeWithPatterns(message, session, isAuthenticated, detectedLanguage) {
        try {
            const lowerMsg = message.toLowerCase().trim();

            // Simple pattern matching for common intents
            const patterns = {
                greeting: /^(hi|hello|hey|hii|ŸÖÿ±ÿ≠ÿ®ÿß|ÿ£ŸáŸÑÿß|‡§π‡•à‡§≤‡•ã|‡§®‡§Æ‡§∏‡•ç‡§§‡•á)$/i,
                login: /(login|log in|sign in|ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ|‡§≤‡•â‡§ó‡§ø‡§®)/i,
                signup: /(signup|sign up|register|ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®|‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞)/i,
                deposit: /(deposit|add money|ÿ•ŸäÿØÿßÿπ|‡§ú‡§Æ‡§æ)/i,
                withdraw: /(withdraw|cash out|ÿ≥ÿ≠ÿ®|‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡§æ)/i,
                transfer: /(transfer|send money|ÿ™ÿ≠ŸàŸäŸÑ|‡§∏‡•ç‡§•‡§æ‡§®‡§æ‡§Ç‡§§‡§∞‡§£)/i,
                check_balance: /(balance|show balance|check balance|ÿ±ÿµŸäÿØ|‡§¨‡•à‡§≤‡•á‡§Ç‡§∏)/i,
                dashboard: /(dashboard|account overview|ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ|‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°)/i,
                support: /(help|support|ŸÖÿ≥ÿßÿπÿØÿ©|‡§∏‡§π‡§æ‡§Ø‡§§‡§æ)/i,
                menu: /(menu|show menu|ŸÇÿßÿ¶ŸÖÿ©|‡§Æ‡•á‡§®‡•Ç)/i,
                how_to_use: /(how to use|usage guide|help guide|ŸÉŸäŸÅŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ|‡§â‡§™‡§Ø‡•ã‡§ó ‡§ó‡§æ‡§á‡§°)/i,
                logout: /(logout|log out|sign out|ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨|‡§≤‡•â‡§ó‡§Ü‡§â‡§ü)/i
            };

            // Find matching intent
            for (const [intent, pattern] of Object.entries(patterns)) {
                if (pattern.test(lowerMsg)) {
                    const needsAuth = !['greeting', 'login', 'signup', 'support', 'how_to_use'].includes(intent);

                    return {
                        status: "success",
                        intent: intent,
                        params: {},
                        needsAuth: needsAuth,
                        confidence: 0.8,
                        hasCompleteInfo: intent === 'greeting' || intent === 'support' || intent === 'how_to_use',
                        language: detectedLanguage
                    };
                }
            }

            // Default fallback
            return {
                status: "success",
                intent: "greeting",
                params: {},
                needsAuth: false,
                confidence: 0.5,
                hasCompleteInfo: true,
                language: detectedLanguage
            };

        } catch (error) {
            console.error('Pattern matching error:', error);
            return { status: "error", message: "Failed to analyze with patterns" };
        }
    }

    // Get the appropriate model name based on provider
    getModelName() {
        switch (AI_PROVIDER.toLowerCase()) {
            case 'openai':
                return 'gpt-3.5-turbo'; // or 'gpt-4' if you prefer
            case 'groq':
            default:
                return 'llama-3.1-8b-instant';
        }
    }

    // Get API configuration based on provider
    getAPIConfig() {
        switch (AI_PROVIDER.toLowerCase()) {
            case 'openai':
                return {
                    baseUrl: OPENAI_BASE_URL,
                    apiKey: OPENAI_API_KEY,
                    provider: 'openai'
                };
            case 'groq':
            default:
                return {
                    baseUrl: GROQ_BASE_URL,
                    apiKey: GROQ_API_KEY,
                    provider: 'groq'
                };
        }
    }

    async callAI(payload, retries = 2) {
        const config = this.getAPIConfig();

        if (!config.apiKey) {
            throw new Error(`${config.provider.toUpperCase()} API key is not configured. Please set ${config.provider.toUpperCase()}_API_KEY environment variable.`);
        }

        for (let attempt = 0; attempt <= retries; attempt++) {
            try {
                const response = await fetch(`${config.baseUrl}/chat/completions`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${config.apiKey}`
                    },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    if (response.status === 429) {
                        if (attempt < retries) {
                            // Exponential backoff: wait 2^attempt seconds
                            const waitTime = Math.pow(2, attempt) * 1000;
                            console.log(`Rate limit hit on ${config.provider.toUpperCase()}, waiting ${waitTime}ms before retry ${attempt + 1}/${retries}`);
                            await new Promise(resolve => setTimeout(resolve, waitTime));
                            continue;
                        }
                        throw new Error(`Rate limit exceeded on ${config.provider.toUpperCase()}. Please try again in a few minutes.`);
                    } else if (response.status === 401) {
                        throw new Error(`Invalid API key or authentication failed for ${config.provider.toUpperCase()}.`);
                    } else if (response.status >= 500) {
                        if (attempt < retries) {
                            const waitTime = 1000 * (attempt + 1);
                            console.log(`${config.provider.toUpperCase()} server error ${response.status}, waiting ${waitTime}ms before retry ${attempt + 1}/${retries}`);
                            await new Promise(resolve => setTimeout(resolve, waitTime));
                            continue;
                        }
                        throw new Error(`${config.provider.toUpperCase()} API server error: ${response.status}. Please try again later.`);
                    } else {
                        throw new Error(`${config.provider.toUpperCase()} API error: ${response.status} - ${response.statusText}`);
                    }
                }

                return await response.json();
            } catch (error) {
                if (attempt === retries) {
                    console.error(`${config.provider.toUpperCase()} API call failed after all retries:`, error);
                    throw error;
                }

                // If it's a network error, retry
                if (error.name === 'TypeError' || error.code === 'ECONNRESET') {
                    const waitTime = 1000 * (attempt + 1);
                    console.log(`Network error with ${config.provider.toUpperCase()}, waiting ${waitTime}ms before retry ${attempt + 1}/${retries}`);
                    await new Promise(resolve => setTimeout(resolve, waitTime));
                    continue;
                }

                // If it's an API error, don't retry
                throw error;
            }
        }
    }

}

export default new AIAssistant();
